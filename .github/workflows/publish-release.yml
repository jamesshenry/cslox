name: Publish Stable Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  check-config:
    name: Check Project Configuration
    runs-on: ubuntu-latest
    outputs:
      is_library: ${{ steps.check_file.outputs.is_library }}
      is_app: ${{ steps.check_file.outputs.is_app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read configuration from public.env
        id: check_file
        run: |
          # Initialize variables to a known default state.
          IS_LIBRARY="false"
          IS_APP="false"

          echo "--- Reading public.env ---"
          # This robust loop reads the file line by line, ignoring line endings.
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Use case statement for clean, exact matching.
            case "$line" in
              # Match lines that start with "PROJECT_TO_PACK="
              PROJECT_TO_PACK=*)
                # Get the value after the '='
                value="${line#*=}"
                # Check if the value is not an empty string.
                if [[ -n "$value" ]]; then
                  echo "Found non-empty PROJECT_TO_PACK"
                  IS_LIBRARY="true"
                fi
                ;;
              # Match lines that start with "PROJECT_TO_PUBLISH="
              PROJECT_TO_PUBLISH=*)
                value="${line#*=}"
                if [[ -n "$value" ]]; then
                  echo "Found non-empty PROJECT_TO_PUBLISH"
                  IS_APP="true"
                fi
                ;;
            esac
          done < public.env

          echo "--- Setting outputs ---"
          echo "is_library=${IS_LIBRARY}" >> $GITHUB_OUTPUT
          echo "is_app=${IS_APP}" >> $GITHUB_OUTPUT
          
          # Add extra logging for easy debugging in the Actions UI
          echo "is_library is ${IS_LIBRARY}"
          echo "is_app is ${IS_APP}"

  release-nuget:
    name: Publish NuGet Package
    needs: check-config
    if: needs.check-config.outputs.is_library == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Restore .NET tools
        run: dotnet tool restore
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
      - name: Create .env file with secrets
        run: echo "NUGET_API_KEY=${{ secrets.NUGET_API_KEY }}" > .env
        env: 
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} 
      - name: Run Tests
        run: task test
      - name: Pack and Push NuGet Package
        run: task push-nuget

  release-velopack:
    name: Prepare Velopack Release
    needs: check-config
    if: needs.check-config.outputs.is_app == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}

  # Job 4: Build the application on a matrix.
  build-and-publish-velopack:
    name: Build & Publish for ${{ matrix.os }}-${{ matrix.arch }}
    needs: release-velopack # Depends on the release placeholder being created.
    # The 'if' condition is inherited from the 'needs' dependency.
    # If release-velopack is skipped, this job will also be skipped.
    runs-on: ${{ matrix.runner_os }}
    strategy:
      matrix:
        include:
          - { runner_os: windows-latest, os: win, arch: x64 }
          - { runner_os: ubuntu-latest, os: linux, arch: x64 }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Setup Taskfile
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add .NET tools to PATH
        if: runner.os != 'Windows'
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Run Tests
        run: task test
      - name: Build and Pack for ${{ matrix.os }}-${{ matrix.arch }}
        run: task build-platform-release OS=${{ matrix.os }} ARCH=${{ matrix.arch }} APP_VERSION=${{ github.ref_name }}
      - name: Upload Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          RID="${{ matrix.os }}-${{ matrix.arch }}"
          SEARCH_PATH="./dist/releases/$RID"
          echo "Searching for release asset in: $SEARCH_PATH"

          # Use find to build a list of all files we want to upload.
          # The -o flag means "OR".
          if [[ "${{ matrix.os }}" == "win" ]]; then
            # For Windows, find the -Setup.exe AND the -Portable.zip
            FILES_TO_UPLOAD=$(find "$SEARCH_PATH" \( -name "*-Setup.exe" -o -name "*-Portable.zip" \))
          elif [[ "${{ matrix.os }}" == "linux" ]]; then
            # For Linux, find the .AppImage AND the -Portable.zip
            FILES_TO_UPLOAD=$(find "$SEARCH_PATH" \( -name "*.AppImage" -o -name "*-Portable.zip" \))
          elif [[ "${{ matrix.os }}" == "osx" ]]; then
            # For macOS, find ALL .zip files (which includes the main app and portable)
            FILES_TO_UPLOAD=$(find "$SEARCH_PATH" -name "*.zip")
          fi

          # Check if we found any files before trying to upload.
          if [[ -z "$FILES_TO_UPLOAD" ]]; then
            echo "::error::Could not find any release assets to upload in $SEARCH_PATH"
            exit 1
          fi

          echo "--- Found assets to upload ---"
          echo "$FILES_TO_UPLOAD"
          echo "------------------------------"

          # Use xargs to pass the list of files to the gh command.
          echo "$FILES_TO_UPLOAD" | xargs gh release upload ${{ github.ref_name }} --clobber
