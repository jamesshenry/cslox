#!/usr/bin/dotnet run

#:package McMaster.Extensions.CommandLineUtils@4.1.1
#:package Bullseye@6.0.0
#:package SimpleExec@12.0.0

using Bullseye;
using McMaster.Extensions.CommandLineUtils;
using static Bullseye.Targets;
using static SimpleExec.Command;

Console.WriteLine(args.Length);

if (args.Length == 0)
{
    Console.WriteLine("Usage: cslox.tool <source file>");
    System.Environment.Exit(64);
}

var outputDir = args[0];

DefineAst(
    outputDir,
    "Expr",
    [
        "Binary   : Expr left, Token opr, Expr right",
        "Grouping : Expr expression",
        "Literal  : object value",
        "Unary    : Token opr, Expr right",
    ]
);

static void DefineAst(string outputDir, string baseName, string[] types)
{
    var path = Path.Combine(outputDir, $"{baseName}.cs");
    using var writer = new StreamWriter(path);
    writer.WriteLine("// This file is generated by cslox.tool. Do not edit it manually.");
    writer.WriteLine($"namespace cslox;\n");
    writer.WriteLine($"public abstract record {baseName}\n{{");

    DefineVisitor(writer, baseName, types);

    foreach (var typ in types)
    {
        string className = typ.Split(':')[0].Trim();
        string fieldString = typ.Split(':')[1].Trim();
        DefineType(writer, baseName, className, fieldString);
    }

    writer.WriteLine("    public abstract T Accept<T>(IVisitor<T> visitor);");

    writer.WriteLine($"}}");
    writer.Close();
}

static void DefineVisitor(StreamWriter writer, string baseName, string[] types)
{
    writer.WriteLine(
        """
    public interface IVisitor<T>
    {
"""
    );

    foreach (string t in types)
    {
        string typeName = t.Split(':')[0].Trim();
        writer.WriteLine(
            $$"""
        public abstract T Visit({{typeName}} {{baseName.ToLower()}});
"""
        );
    }

    writer.WriteLine(
        """
    }

"""
    );
}

static void DefineType(TextWriter writer, string baseName, string className, string fieldString)
{
    writer.WriteLine(
        $$"""
    public record {{className}}({{fieldString}}) : {{baseName}}
    {
        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.Visit(this);
        }
    }

"""
    );
}
